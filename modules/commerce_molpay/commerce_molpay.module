<?php

    /**
     * @file
     * Implements molpay payment services for use with Drupal Commerce.
     */

    /**
     * Implements hook_init().
     */

    function commerce_molpay_init() 
	{
        if (module_exists('commerce_molpay')) 
		{
            // Include molpay class.
            $path = libraries_get_path('molpay');
            if ($path) 
			{
                include_once $path . '/molpay.class.php';
            }
        }
    }

    /**
     * Implements hook_permission().
     */
    function commerce_molpay_permission() {
        return array(
            'administer commerce molpay' => array(
                'title' => t('Administer Commerce molpay'),
                'description' => t('Perform administration tasks for Commerce molpay.'),
            ),
        );
    }

    /**
     * Implements hook_menu().
     */
    function commerce_molpay_menu() {
        $items = array();

        $items['admin/commerce/config/molpay'] = array(
            'title' => 'MOLPay Settings',
            'description' => 'Configure molpay settings.',
            'page callback' => 'drupal_get_form',
            'page arguments' => array('commerce_molpay_admin_form'),
            'access arguments' => array('administer commerce molpay'),
        );
		
		$items['admin/commerce/callback'] = array(
			'title' => 'callback',
			'page callback' => 'commerce_molpay_callback',
			'access callback' => TRUE,
			'type'=> MENU_CALLBACK
        );

        return $items;
    }

    /**
     * Implements hook_cron().
     */
    function commerce_molpay_cron() {
        // Re-query for status.
        // Fetch molpay transaction that are not 'requeried' yet.
        if (variable_get('commerce_molpay_cron_requery_enabled', FALSE)) {
            $molpay = new molpay();
            if (variable_get('commerce_molpay_cron_requery_limit') == 0) {
              // No limit requery.
              $query = db_query('SELECT ci.merchant_ID, ci.order_id, ci.amount, ci.currency FROM {commerce_molpay} ci WHERE ci.requery_status = 0 AND ci.requery_timestamp = 0');
            } else {
                $query = db_query('SELECT ci.merchant_ID, ci.order_id, ci.amount, ci.currency FROM {commerce_molpay} ci WHERE ci.requery_status = 0 AND ci.requery_timestamp = 0 LIMIT :limit', array(':limit' => variable_get('commerce_molpay_cron_requery_limit', 50)));
            }
            $result = $query->fetchAll();
            if ($result) {
                foreach ($result as $record) {
                    $status = $molpay->requery(array('MerchantID' => $record->merchant_ID, 'orderid' => $record->order_id, 'amount' => number_format(commerce_currency_amount_to_decimal($record->amount, strtoupper($record->currency)), 2)));

                     // Now we update the status.
                     $updated = db_update('commerce_molpay')
                        ->fields(array(
                            'requery_status' => ($status == '00') ? 1 : 0,
                            'requery_timestamp' => REQUEST_TIME,
                        ))
                        ->condition('order_id', $record->order_id, '=')
                        ->execute();

                     if ($updated) {
                        watchdog('commerce_molpay', 'Commerce molpay re-query update was successful.');
                     } else {
                        watchdog('commerce_molpay', 'Commerce molpay re-query failed to update record.', 'error');
                     }
                }
            }
        }
    }

    /**
     * Commerce molpay admin form.
     *
     * @todo Add configuration to select available payment methods and currency.
     */
    function commerce_molpay_admin_form($form, &$form_state) {
		
		if(!class_exists('molpay'))
		{
			$path = libraries_get_path('molpay');
            if ($path) 
			{
                include_once $path . '/molpay.class.php';
            }
		}
		
        $form['merchant'] = array(
          '#type' => 'fieldset',
          '#title' => t('Merchant information'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );
        $form['merchant']['molpay_logo'] = array(
          '#markup' => l(
            theme_image(array(
              'path' => drupal_get_path('module', 'commerce_molpay') . '/images/molpay-logo.png',
              'alt' => t('MOLPay Malaysia Online Payment'),
              'title' => t('MOLPay Malaysia Online Payment'),
              'attributes' => array('style' => 'float: right; margin: 0 1em 1em 0;'),
            )),
            'http://www.molpay.com',
            array('html' => TRUE, 'attributes' => array('target' => '_blank'))
          ),
        );
        $form['merchant']['merchant_ID'] = array(
          '#type' => 'textfield',
          '#title' => t('Merchant ID'),
          '#size' => 50,
          '#maxlength' => 34,
          '#required' => TRUE,
          '#default_value' => variable_get('commerce_molpay_merchant_ID'),
          '#description' => t('Merchant ID given by molpay.'),
        );
        $form['merchant']['merchant_vkey'] = array(
          '#type' => 'textfield',
          '#title' => t('Merchant Vkey'),
          '#size' => 50,
          '#maxlength' => 34,
          '#required' => TRUE,
          '#default_value' => variable_get('commerce_molpay_merchant_vkey'),
          '#description' => t('Merchant\'s private verify key.'),
        );

        if (class_exists('molpay')) {
          $payment_methods = _commerce_molpay_get_payment_methods();
          $form['payment_methods'] = array(
            '#type' => 'fieldset',
            '#title' => t('Payment methods'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
          );
          $form['payment_methods']['payment_methods_enabled'] = array(
            '#type' => 'checkboxes',
            '#title' => t('Enabled payment methods'),
            '#default_value' => variable_get('commerce_molpay_enabled_payment_methods', array(2, 6, 8, 10, 14, 15, 16, 17, 20, 21, 23, 48)),  // Enabled common payment methods by default.
            '#options' => $payment_methods,
            '#required' => TRUE,
            '#description' => t('Select the payments to be enabled on checkout.'),
          );
        } else {
            drupal_set_message(t('Class <em>molpay</em> not found. Please make sure you have followed setup instructions in Readme file.'), 'error');
        }

        $form['requery'] = array(
          '#type' => 'fieldset',
          '#title' => t('Re-query settings'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['requery']['requery_enabled'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable re-query'),
          '#default_value' => variable_get('commerce_molpay_cron_requery_enabled', FALSE),
        );
        $form['requery']['requery_cron_limit'] = array(
          '#type' => 'select',
          '#title' => t('Cron limit'),
          '#default_value' => variable_get('commerce_molpay_cron_requery_limit', 50),
          '#options' => array(25 => 25, 50 => 50, 100 => 100, 200 => 200, 300 => 300, 0 => t('No limit')),
          '#required' => TRUE,
          '#description' => t('Specify the number of transaction to validate / requery on cron run.'),
        );

        $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

        return $form;
    }

    function commerce_molpay_admin_form_submit($form, &$form_state) {
        $values = $form_state['values'];

        // Save settings into variable table.
        variable_set('commerce_molpay_merchant_ID', $values['merchant_ID']);
        variable_set('commerce_molpay_merchant_vkey', $values['merchant_vkey']);
        variable_set('commerce_molpay_enabled_payment_methods', isset($values['payment_methods_enabled']) ? $values['payment_methods_enabled'] : array());
        variable_set('commerce_molpay_cron_requery_enabled', $values['requery_enabled']);
        variable_set('commerce_molpay_cron_requery_limit', $values['requery_cron_limit']);

        drupal_set_message(t('Settings has been saved.'));
    }

    /**
     * Implements hook_commerce_payment_method_info().
     *
     * @todo Allow terminal payment.
     */
    function commerce_molpay_commerce_payment_method_info() {
        $payment_methods = array();

        $payment_methods['commerce_molpay'] = array(
            'title' => t('MOLPay'),
            'description' => t('Pay with MOLPay payment method.'),
            'terminal' => FALSE,
            'active' => TRUE,
            'offsite' => TRUE,
        );

        return $payment_methods;
    }

    /**
     * Payment method callback: submit form.
     */
    function commerce_molpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
        // Unset all previous orders from session.
        drupal_session_start();
        unset($_SESSION['commerce_molpay']);

        $form = array();

        // Merge in values from the order.
        if (!empty($order->data['commerce_molpay'])) {
            $pane_values += $order->data['commerce_molpay'];
        }

        // Merge in default values.
        $pane_values += array(
            'payment_id' => 2,  // Default to Credit Card (MYR).
        );

        $form['molpay_logo'] = array(
            '#markup' => l(
                theme_image(array(
                      'path' => drupal_get_path('module', 'commerce_molpay') . '/images/molpay-logo.png',
                      'alt' => t('MOLPay Malaysia Online Payment.'),
                      'title' => t('MOLPay Malaysia Online Payment.'),
                      'attributes' => array('style' => 'float: right; margin: 0 1em 1em 0;'),
                )),
                'http://www.molpay.com',
                array('html' => TRUE, 'attributes' => array('target' => '_blank'))
            ),
        );

        // Fetch list of enabled payment methods from configuration.
        $enabled_payment_methods = _commerce_molpay_get_payment_methods();
        $payment_methods = array();
        if ($enabled_payment_methods) {
            foreach ($enabled_payment_methods as $key => $val) {
                if (in_array($key, variable_get('commerce_molpay_enabled_payment_methods', array()))) {
                    $payment_methods[$key] = $val;
                }
            }
        }
        if (!$payment_methods) {
            drupal_set_message(t('There are no available payment methods configured.'), 'warning');
        }
        $form['payment_id'] = array(
            '#type' => 'select',
            '#title' => t('Payment method'),
            '#default_value' => $pane_values['payment_id'],
            '#options' => $payment_methods,
            '#required' => TRUE,
            '#description' => t('Default is Credit Payment(Visa@mastercard), You can change payment method at the payment page'),
        );

        return $form;
    }

    /**
     * On submission form, store selected payment ID in session temporarily.
     */
    function commerce_molpay_submit_form_submit($form, &$form_state) {
        drupal_session_start();
        $_SESSION['commerce_molpay']['payment_id'] = $form_state['payment_id']['#value'];
    }

    /**
     * Implements hook_redirect_form().
     */
    function commerce_molpay_redirect_form($form, &$form_state, $order, $payment_method) {
        // Return error if merchant ID and vkey is not configured.
        if (variable_get('commerce_molpay_merchant_ID') == '') {
            drupal_set_message(t('Merchant Code is not configured for molpay yet. Please !click_here to review configuration.', array('!click_here' => l('click here', 'admin/commerce/config/molpay'))), 'error');
            return array();
        }
        if (variable_get('commerce_molpay_merchant_vkey') == '') {
            drupal_set_message(t('Merchant Key is not configured for molpay yet. Please !click_here to review configuration.', array('!click_here' => l('click here', 'admin/commerce/config/molpay'))), 'error');
            return array();
        }

        $settings = array(
            'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
            'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
            'payment_method' => $payment_method['instance_id'],
        );

        return commerce_molpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
    }

    function commerce_molpay_order_form($form, &$form_state, $order, $settings) {
		
		if(!class_exists('molpay'))
		{
			$path = libraries_get_path('molpay');
            if ($path) 
			{
                include_once $path . '/molpay.class.php';
            }
		}
		
        // Add Javascript to automatically post to molpay, and hide the submit button to prevent multiple submission.
        drupal_add_js('jQuery(function ($) { $(\'#commerce-molpay-redirect-form .form-submit\').hide(); $(\'#commerce-molpay-redirect-form\').submit(); } );', 'inline');

        drupal_session_start();
        $payment_id = isset($_SESSION['commerce_molpay']['payment_id']) ? $_SESSION['commerce_molpay']['payment_id'] : 0;

        // Ensure a default value for the payment_method setting.
        $settings += array('payment_method' => '');

        // Load customer profile.
        $customer_profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
        $user_profile = user_load($customer_profile->uid);
        // Load product name.

        // Build the data array that will be converted into hidden form values.

        $amount = number_format(commerce_currency_amount_to_decimal($order->commerce_order_total['und'][0]['amount'], $order->commerce_order_total['und'][0]['currency_code']), 2);

        $vcode = md5($amount.variable_get('commerce_molpay_merchant_ID').$order->order_id.variable_get('commerce_molpay_merchant_vkey'));
        $molpay = new molpay(variable_get('commerce_molpay_merchant_ID'));
        $molpay->setMerchantKey(variable_get('commerce_molpay_merchant_vkey'));
        $molpay->setField('orderid', $order->order_id);
        $molpay->setField('amount', $amount);
        $molpay->setField('cur', $order->commerce_order_total['und'][0]['currency_code']);
        $molpay->setField('bill_desc', substr(variable_get('site_name', 'Drupal Commerce') . ' - Order no ' . $order->order_id, 0, 100));
        $molpay->setField('bill_name', $user_profile->name);
        $molpay->setField('bill_email', $user_profile->mail);
        $molpay->setField('returnurl', $settings['return']);
        $molpay->setField('vcode', $vcode);
        $data = $molpay->getFields();

        $payment_url = "https://www.onlinepayment.com.my/NBepay/pay/".strtolower(variable_get('commerce_molpay_merchant_ID'))."/";

        // Temporarily store data in session (this is not used for validating payment, just logging)
        drupal_session_start();
        unset($_SESSION['commerce_molpay']['orders']);  // Unset all previous orders from session.
        $_SESSION['commerce_molpay']['orders'][$order->order_id] = serialize($data);

        $form['redirect'] = array(
            '#markup' => '<br />' . t('<p>You are being redirected to molpay payment page. If not, click on the button below.</p>'),
        );

        $form['#action'] = $payment_url;

        foreach ($data as $name => $value) {
            if (!empty($value)) {
                $form[$name] = array('#type' => 'hidden', '#value' => $value);
            }
        }
            $commerce_molpay_nid = db_insert('commerce_molpay')
                ->fields(array(
                    'orderid' => $order->order_id,
                    'amount' => $amount,
                    'cur' => $order->commerce_order_total['und'][0]['currency_code'],
                            'country' => "MY",
                    'bill_desc' => substr(variable_get('site_name', 'Drupal Commerce') . ' - Order no' . $order->order_id, 0, 100),
                    'bill_name' => $user_profile->name,
                    'bill_email' => $user_profile->mail,
                ))
                ->execute();

        $form['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Proceed to MOLPay'),
        );

        return $form;
    }

    /**
     * Implements hook_redirect_form_validate.
     */
    function commerce_molpay_redirect_form_validate($order, $payment_method) {
		

		if(!class_exists('molpay'))
		{
			$path = libraries_get_path('molpay');
            if ($path) 
			{
                include_once $path . '/molpay.class.php';
            }
		}
		
        // Receive response from molpay server.
        $molpay = new molpay(variable_get('commerce_molpay_merchant_ID'));
        $response = $molpay->getResponse();

        drupal_session_start();
        $molpay_session_temp = isset($_SESSION['commerce_molpay']['orders'][$order->order_id]) ? unserialize($_SESSION['commerce_molpay']['orders'][$order->order_id]) : array();
        unset($_SESSION['commerce_molpay']['orders'][$order->order_id]);
        // Log message to watchdog.
        if ($response['status'] == '00') {
            watchdog('commerce_molpay', 'Transaction was successful for Order ID !order_id.', array('!order_id' => $order->order_id));

            commerce_molpay_transaction($payment_method, $order, $response['data'] + $molpay_session_temp);
        } elseif ($response['status'] == '11') {
          watchdog('commerce_molpay', 'Transaction was not successful for Order ID !order_id with the error:- @err_msg', array('!order_id' => $order->order_id, '@err_msg' => 'Trasaction Failed!'), WATCHDOG_WARNING);
            return FALSE;
            
        } elseif ($response['status'] == '22') {
          watchdog('commerce_molpay', 'Transaction was pending for Order ID !order_id with the error:- @err_msg', array('!order_id' => $order->order_id, '@err_msg' => 'Trasaction Pending!'), WATCHDOG_WARNING);
            return FALSE;
            
        } else {
          watchdog('commerce_molpay', 'Transaction was not successful for Order ID !order_id with the error:- @err_msg', array('!order_id' => $order->order_id, '@err_msg' => 'Trasaction Failed!'), WATCHDOG_WARNING);
            return FALSE;
        }
		$molpay->ipn();
        return TRUE;
    }

    /**
     * Create a transaction and associate it with an order.
     */
    function commerce_molpay_transaction($payment_method, $order, $response) {
        $vkey = variable_get('commerce_molpay_merchant_vkey');

        $transaction = commerce_payment_transaction_new('commerce_molpay', $order->order_id);

        if ($response['status'] == "00") {
            $statuspayment = COMMERCE_PAYMENT_STATUS_SUCCESS;
        } else {
            $statuspayment = COMMERCE_PAYMENT_STATUS_FAILURE;
        }

        $transaction->instance_id = $payment_method['instance_id'];
        $transaction->amount = str_replace('.', '', str_replace(',', '', $response['amount']));
        $transaction->orderid = $response['orderid'];
        $transaction->appcode = $response['appcode'];
        $transaction->tranID = $response['tranID'];
        $transaction->domain = $response['domain'];
        $transaction->currency = $response['currency'];
        $transaction->status = $statuspayment;
        $transaction->paydate = $response['paydate'];
        $transaction->channel = $response['channel'];
        $transaction->skey = $response['skey'];
        //$transaction->status = COMMERCE_PAYMENT_status_SUCCESS;
        commerce_payment_transaction_save($transaction);

        $key0 = md5( $response['tranID'].$response['orderid'].$response['status'].$response['domain'].$response['amount'].$response['currency'] );
        $key1 = md5( $response['paydate'].$response['domain'].$key0.$response['appcode'].$vkey );
        if( $transaction->skey != $key1 ) $status=-1; // invalid transaction
        //-------------------------------------------
        if ( $response['status'] == "00" ) {
            $commerce_molpay_nid = db_update('commerce_molpay')
            ->fields(array(
                'tranID' => $response['tranID'],
                'appcode' => $response['appcode'],
                'status' => $response['status'],
                'paydate' => $response['paydate'],
                'channel' => $response['channel'],
            ))
            ->condition('orderid', $transaction->orderid)
            ->execute();
        }
    }

    /**
     * Get all available payment methods as defined from its class.
     *
     * @param boolean $sort Set to TRUE to return payment methods that are sorted.
     *
     * @return array Available payment methods.
     */
    function _commerce_molpay_get_payment_methods($sort = TRUE) {
		
		if(!class_exists('molpay'))
		{
			$path = libraries_get_path('molpay');
            if ($path) 
			{
                include_once $path . '/molpay.class.php';
            }
		}
		
        $payment_methods = molpay::$payment_methods;
        $payment_methods_formatted = array();
        if ($payment_methods) {
        //    // Whitelist payment methods to defined options here.
        //    foreach ($payment_methods as $key => $payment_method) {
        //      if (!in_array($payment_method[0], array(2, 6, 8, 10, 14, 15, 16, 17, 20, 21, 23, 48))) {
        //        unset($payment_methods[$key]);
        //      }
        //    }

        // Format result to be presented.
            foreach ($payment_methods as $payment_method) {
                if (isset($payment_method[0]) && isset($payment_method[1])) {
                    $payment_methods_formatted[$payment_method[0]] = trim($payment_method[1]) . (isset($payment_method[2]) ? ' (' . strtoupper(trim($payment_method[2])) . ')' : '');
                }
            }
        }
        asort($payment_methods_formatted);

        return $payment_methods_formatted;
    }

	function commerce_molpay_callback()
	{
		if(!class_exists('molpay'))
		{
			$path = libraries_get_path('molpay');
            if ($path) 
			{
                include_once $path . '/molpay.class.php';
            }
		}
		
		if(isset($_POST['nbcb']) && !empty($_POST['nbcb']))
		{
			$vkey 			=variable_get('commerce_molpay_merchant_vkey'); //Replace xxxxxxxxxx ​with your MOLPay Verify Key
			$_POST['treq']	=1; 
			
			/********************************
			*Don't change below parameters
			********************************/
			$nbcb 		=$_POST['nbcb'];
			$tranID 	=$_POST['tranID'];
			$orderid 	=$_POST['orderid'];
			$status 	=$_POST['status'];
			$domain 	=$_POST['domain'];
			$amount 	=$_POST['amount'];
			$currency 	=$_POST['currency'];
			$appcode 	=$_POST['appcode'];
			$paydate 	=$_POST['paydate'];
			$skey 		=$_POST['skey'];
			$channel 	=$_POST['channel'];
			
			/***********************************************************
			* To verify the data integrity sending by MOLPay
			************************************************************/
			$key0 = md5( $tranID.$orderid.$status.$domain.$amount.$currency );
			$key1 = md5( $paydate.$domain.$key0.$appcode.$vkey );
			
			if($skey != $key1) $status = ­1; // Invalid transaction
			
			db_update('commerce_molpay')
			->fields
			(
				[
					'tranID' 	=> $tranID,
					'appcode' 	=> $appcode,
					'status' 	=> $status,
					'paydate' 	=> $paydate,
					'channel' 	=> $channel,
				]
			)
			->condition('orderid', $orderid)
			->execute();
			
			if ( $status == "00" ) 
			{	
				db_update('commerce_order')
				->fields
				(
					[
						'status' => 'completed'
					]
				)
				->condition('order_id', $orderid)
				->execute();
			}
			if ( $status == "11" )
			{
				db_update('commerce_order')
				->fields
				(
					[
						'status' => 'canceled'
					]
				)
				->condition('order_id', $orderid)
				->execute();
			}
			if ( $status == "22" )
			{
				db_update('commerce_order')
				->fields
				(
					[
						'status' => 'pending'
					]
				)
				->condition('order_id', $orderid)
				->execute();
			}
			
			if ($nbcb == 1)
			{
				echo "CBTOKEN:MPSTATOK";
				exit;
			}
		}
	}
